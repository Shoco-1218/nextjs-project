{"ast":null,"code":"import queryAsync from \"../../mysql\";\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\n\nasync function auth(req, res) {\n  let data = req.body;\n\n  if (data.action === \"login\") {\n    let name = data.name;\n    let email = data.email;\n    let pass = data.password;\n    let hash = crypto.createHash('sha256').update(pass).digest('base64');\n    let rows = await queryAsync(`\n      SELECT * FROM register WHERE email LIKE \"${email}\"`);\n\n    try {\n      if (rows.length > 0 && rows[0].password == hash) {\n        let token = jwt.sign({\n          email: email,\n          role: rows[0].role\n        }, 'ShokoDidIt');\n        res.setHeader('Set-Cookie', `logInCookie=${token}`);\n        res.statusCode = 200;\n        res.end();\n      } else {\n        res.statusCode = 401;\n        res.end();\n      }\n    } catch (err) {\n      res.statusCode = 401;\n      res.end();\n    }\n  } else if (data.action === \"logout\") {\n    console.log(\"logout\");\n    res.setHeader('Set-Cookie', 'logInCookie=');\n    res.statusCode = 200;\n    res.end();\n  }\n}\n\nexport default auth;","map":{"version":3,"sources":["C:/Users/shoko/src/URE3-Next.js/ure-nextjs/pages/api/auth.js"],"names":["queryAsync","crypto","jwt","auth","req","res","data","body","action","name","email","pass","password","hash","createHash","update","digest","rows","length","token","sign","role","setHeader","statusCode","end","err","console","log"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAEA,eAAeC,IAAf,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,MAAIC,IAAI,GAAGF,GAAG,CAACG,IAAf;;AACA,MAAGD,IAAI,CAACE,MAAL,KAAgB,OAAnB,EAA4B;AAC1B,QAAIC,IAAI,GAAGH,IAAI,CAACG,IAAhB;AACA,QAAIC,KAAK,GAAGJ,IAAI,CAACI,KAAjB;AACA,QAAIC,IAAI,GAAGL,IAAI,CAACM,QAAhB;AACA,QAAIC,IAAI,GAAGZ,MAAM,CAACa,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCJ,IAAnC,EAAyCK,MAAzC,CAAgD,QAAhD,CAAX;AAEA,QAAIC,IAAI,GAAG,MAAMjB,UAAU,CAAE;iDACgBU,KAAM,GADxB,CAA3B;;AAIA,QAAG;AACD,UAAGO,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmBD,IAAI,CAAC,CAAD,CAAJ,CAAQL,QAAR,IAAoBC,IAA1C,EAAgD;AAC9C,YAAIM,KAAK,GAAGjB,GAAG,CAACkB,IAAJ,CAAS;AAACV,UAAAA,KAAK,EAAEA,KAAR;AAAeW,UAAAA,IAAI,EAAEJ,IAAI,CAAC,CAAD,CAAJ,CAAQI;AAA7B,SAAT,EAA6C,YAA7C,CAAZ;AACAhB,QAAAA,GAAG,CAACiB,SAAJ,CAAc,YAAd,EAA6B,eAAcH,KAAM,EAAjD;AACAd,QAAAA,GAAG,CAACkB,UAAJ,GAAiB,GAAjB;AACAlB,QAAAA,GAAG,CAACmB,GAAJ;AACD,OALD,MAKK;AACHnB,QAAAA,GAAG,CAACkB,UAAJ,GAAiB,GAAjB;AACAlB,QAAAA,GAAG,CAACmB,GAAJ;AACD;AACF,KAVD,CAUE,OAAMC,GAAN,EAAW;AACXpB,MAAAA,GAAG,CAACkB,UAAJ,GAAiB,GAAjB;AACAlB,MAAAA,GAAG,CAACmB,GAAJ;AACD;AACF,GAxBD,MAwBO,IAAIlB,IAAI,CAACE,MAAL,KAAgB,QAApB,EAA8B;AACnCkB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAtB,IAAAA,GAAG,CAACiB,SAAJ,CAAc,YAAd,EAA4B,cAA5B;AACAjB,IAAAA,GAAG,CAACkB,UAAJ,GAAiB,GAAjB;AACAlB,IAAAA,GAAG,CAACmB,GAAJ;AACD;AACF;;AAGD,eAAerB,IAAf","sourcesContent":["import queryAsync from \"../../mysql\";\r\nimport crypto from 'crypto';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nasync function auth(req, res) {\r\n  let data = req.body;\r\n  if(data.action === \"login\") {\r\n    let name = data.name;\r\n    let email = data.email;\r\n    let pass = data.password;\r\n    let hash = crypto.createHash('sha256').update(pass).digest('base64');\r\n    \r\n    let rows = await queryAsync(`\r\n      SELECT * FROM register WHERE email LIKE \"${email}\"`\r\n    );\r\n\r\n    try{\r\n      if(rows.length > 0 && rows[0].password == hash) {\r\n        let token = jwt.sign({email: email, role: rows[0].role}, 'ShokoDidIt');\r\n        res.setHeader('Set-Cookie', `logInCookie=${token}`);\r\n        res.statusCode = 200; \r\n        res.end();\r\n      }else{\r\n        res.statusCode = 401;\r\n        res.end();\r\n      }\r\n    } catch(err) {\r\n      res.statusCode = 401;\r\n      res.end();\r\n    }\r\n  } else if (data.action === \"logout\") {\r\n    console.log(\"logout\")\r\n    res.setHeader('Set-Cookie', 'logInCookie=');\r\n    res.statusCode = 200; \r\n    res.end();\r\n  }\r\n}\r\n\r\n\r\nexport default auth"]},"metadata":{},"sourceType":"module"}