{"ast":null,"code":"import queryAsync from \"../../mysql\";\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\n\nasync function auth(req, res) {\n  if (req.method === 'POST') {\n    let data = JSON.parse(req.body);\n    let name = data[0].name;\n    let email = data[1].email;\n    let pass = data[2].password;\n    let hash = crypto.createHash('sha256').update(pass).digest('base64');\n    console.log(hash);\n    let rows = await queryAsync(`\n      SELECT * FROM register WHERE email LIKE \"${email}\"`);\n\n    try {\n      if (rows.length > 0 && rows[0].password == hash) {\n        let token = jwt.sign({\n          email: email,\n          role: rows[0].role\n        }, 'ShokoDidIt');\n        res.setHeader('Set-Cookie', `logInCookie=${token}`);\n        console.log(\"Yeah: \" + token);\n        res.end();\n      }\n    } catch (err) {\n      res.statusCode = 401;\n      res.end();\n    }\n\n    res.end();\n  } else {}\n}\n\nexport default auth;","map":{"version":3,"sources":["C:/Users/shoko/src/URE3-Next.js/ure-nextjs/pages/api/auth.js"],"names":["queryAsync","crypto","jwt","auth","req","res","method","data","JSON","parse","body","name","email","pass","password","hash","createHash","update","digest","console","log","rows","length","token","sign","role","setHeader","end","err","statusCode"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAEA,eAAeC,IAAf,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,MAAGD,GAAG,CAACE,MAAJ,KAAe,MAAlB,EAA0B;AACxB,QAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,IAAf,CAAX;AACA,QAAIC,IAAI,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAnB;AACA,QAAIC,KAAK,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQK,KAApB;AACA,QAAIC,IAAI,GAAGN,IAAI,CAAC,CAAD,CAAJ,CAAQO,QAAnB;AACA,QAAIC,IAAI,GAAGd,MAAM,CAACe,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCJ,IAAnC,EAAyCK,MAAzC,CAAgD,QAAhD,CAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,QAAIM,IAAI,GAAG,MAAMrB,UAAU,CAAE;iDACgBY,KAAM,GADxB,CAA3B;;AAIA,QAAG;AACD,UAAGS,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmBD,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,IAAoBC,IAA1C,EAAgD;AAC9C,YAAIQ,KAAK,GAAGrB,GAAG,CAACsB,IAAJ,CAAS;AAACZ,UAAAA,KAAK,EAAEA,KAAR;AAAea,UAAAA,IAAI,EAAEJ,IAAI,CAAC,CAAD,CAAJ,CAAQI;AAA7B,SAAT,EAA6C,YAA7C,CAAZ;AACApB,QAAAA,GAAG,CAACqB,SAAJ,CAAc,YAAd,EAA6B,eAAcH,KAAM,EAAjD;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAWG,KAAvB;AACAlB,QAAAA,GAAG,CAACsB,GAAJ;AACD;AACF,KAPD,CAOE,OAAMC,GAAN,EAAW;AACXvB,MAAAA,GAAG,CAACwB,UAAJ,GAAiB,GAAjB;AACAxB,MAAAA,GAAG,CAACsB,GAAJ;AACD;;AAGDtB,IAAAA,GAAG,CAACsB,GAAJ;AACD,GA1BD,MA0BO,CAEN;AACF;;AAGD,eAAexB,IAAf","sourcesContent":["import queryAsync from \"../../mysql\";\r\nimport crypto from 'crypto';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nasync function auth(req, res) {\r\n  if(req.method === 'POST') {\r\n    let data = JSON.parse(req.body);\r\n    let name = data[0].name;\r\n    let email = data[1].email;\r\n    let pass = data[2].password;\r\n    let hash = crypto.createHash('sha256').update(pass).digest('base64');\r\n    console.log(hash);\r\n    \r\n    let rows = await queryAsync(`\r\n      SELECT * FROM register WHERE email LIKE \"${email}\"`\r\n    );\r\n\r\n    try{\r\n      if(rows.length > 0 && rows[0].password == hash) {\r\n        let token = jwt.sign({email: email, role: rows[0].role}, 'ShokoDidIt');\r\n        res.setHeader('Set-Cookie', `logInCookie=${token}`);\r\n        console.log(\"Yeah: \" + token);\r\n        res.end();\r\n      }\r\n    } catch(err) {\r\n      res.statusCode = 401;\r\n      res.end();\r\n    }\r\n    \r\n    \r\n    res.end();\r\n  } else {\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default auth;"]},"metadata":{},"sourceType":"module"}